# -*- coding: utf-8 -*-
"""3.4 Taller GeoJsons.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u8cF_dvCrF6jBMP962ynzFQDwWoB98LE

**TALLER**

Utilizando los conocimientos y herramientas de las lecciones anteriores, se debe cargar el geojson de los municipios en el cuaderno de jupyter y abrirlo con geopandas.

Una vez abierto guíe a los estudiantes a que, empleando Shapely:



1. Localicen su hogar y su barrio sobre el mapa (coordenadas usando geojson.io)

2. Dibujen empleando shapely un recuadro sobre su casa o su barrio, dibujen linestrings y polígonos para representar las carreteras de acceso cercanas y algunas de las características geográficas como pueden ser barrios, ciudades, carreteras, ríos, entre otros.

3. Pida a los estudiantes que una vez tengan dibujados los elementos con Python, investiguen cómo guardar la geometría en formato geojson desde geopandas

4.   Una vez generen el archivo geojson, deberán importarlo sobre la herramienta geojson.io Pida a los estudiantes que utilizan la capa “mapa satelital” para que ellos validen si los polígonos se encuentran bien ubicados en el mapa y si representan los elementos que ellos dibujaron. En caso negativo, revise los códigos de representación tanto en geopandas como en geojson.io ya que pueden existir proyecciones diferentes a la UTM.
5. Finalice construyendo conclusiones de la actividad con los estudiantes.
"""

#importo librerias
!pip install mapclassify
!pip install pandas
!pip install shapely matplotlib

# Importar las bibliotecas
from shapely.geometry import Point, LineString, Polygon
import matplotlib.pyplot as plt
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import shapely as shp
import pandas as pd
import os
import mapclassify

#permiso para acceder a drive
from google.colab import drive
drive.mount('/content/drive')

# Cargo el archivo GeoJSON de los municipios
#municipios = '/content/drive/MyDrive/geolocalizacion/TallerGeopandas/datasets/municipios.geojson'
#shapes = gpd.read_file(municipios)

from google.colab import files
import geopandas as gpd

# Cargar el archivo GeoJSON desde tu sistema local
uploaded = files.upload()

# Nombre del archivo cargado
nombre_archivo = next(iter(uploaded))

# Leer el archivo GeoJSON y crear un GeoDataFrame
gdf = gpd.read_file(nombre_archivo)

# Ver las primeras filas del GeoDataFrame
print(gdf.head())

import geopandas as gpd
from shapely.geometry import Point, Polygon, LineString
import matplotlib.pyplot as plt

# Localizar tu hogar y tu barrio en el mapa (usando coordenadas de geojson.io)

# Dibujar un recuadro sobre tu casa o tu barrio (ejemplo de un cuadrado)
recuadro_casa = Polygon([(-76.57610305160782, 2.497133990213797),
                        (-76.57610305160782, 2.497250328430269),
                        (-76.57622381332736, 2.497250328430269),
                        (-76.57622381332736, 2.497133990213797)])
#dibujo punto casa
punto_casa = Point([(-76.57585762151763, 2.497719895819216)])

recuadro_barrio = Polygon ([(-76.57605992242193, 2.498547283405827),
                            (-76.5765515951382, 2.497849254641636),
                            (-76.57644377217382, 2.497452843079401),
                            (-76.5768707511116, 2.497280490187876),
                            (-76.5766982343694, 2.4969357843397546),
                            (-76.57703032909865, 2.496733269610928),
                            (-76.57675430231048, 2.4962679165000594),
                            (-76.57541729755607, 2.4969056225728536),
                            (-76.57593916070239, 2.497956975153116),
                            (-76.57593916070239,2.4983620042022068)])
#dibujo punto barrio
punto_barrio = Point([(-76.57616719933496, 2.497221051038906)])

# Dibujar linestrings y polígonos para representar características geográficas, rios variantes
carretera_cercana1 = LineString([(-76.5745925370611, 2.495452318467457),
                                (-76.57537283892209, 2.4966996168931956),
                                (-76.57556011136907, 2.497603907512186),
                                (-76.57621556493251, 2.499069480640003),
                                (-76.57793222902714, 2.5002855932703767),
                                (-76.5799610138663, 2.501221063756887),
                                (-76.58099101232305, 2.5020629866244377),
                                (-76.58336312998114, 2.503029638140049),
                                (-76.58436191636352, 2.503372643344349)])

variente_cercana = LineString([(-76.56205362008946, 2.4947191230149883),
                              (-76.5688514126266, 2.496958027650308),
                              (-76.5700018082863, 2.497196843920449),
                              (-76.57098786170918, 2.4970177317216127),
                              (-76.57796559472223, 2.493846837393164)])

barrio_cercano1 = Polygon([(-76.58341147792295,2.5029500712588373),
                            (-76.58093140416217, 2.5018754024150525),
                            (-76.58248518531349, 2.499576802211365),
                            (-76.58457681378661, 2.5004275832761635),
                            ( -76.58342641812628, 2.5029500712588373)])

barrio_cercano2 = Polygon([(-76.58526916712216, 2.504065976137224),
                          (-76.58526916712216, 2.504065976137224),
                          (-76.58518057547934, 2.504061628061733),
                          (-76.58509283702422, 2.50404862570969),
                          (-76.58500679672775, 2.5040270943011067),
                          (-76.5849232832066, 2.5039972411956337),
                          (-76.584843100743, 2.503959353895553),
                          (-76.58476702153897, 2.5039137972769536),
                          (-76.58469577827971, 2.5038610100757523),
                          (-76.58463005707723, 2.5038015006623926),
                          (-76.58457049086284, 2.5037358421459306),
                          (-76.58451765329154, 2.503664666854646),
                          (-76.58447205321754, 2.503588660246343),
                          (-76.58443412979365, 2.5035085543069835),
                          (-76.58440424824204, 2.503425120501232),
                          (-76.58438269633706, 2.5033391623428054),
                          (-76.58436968163373, 2.503251507656172),
                          (-76.58436532946915, 2.5031630006041357),
                          (-76.58436968175522, 2.5030744935580755),
                          (-76.58438269657535, 2.502986838889143),
                          (-76.58440424858802, 2.502900880759461),
                          (-76.58443413023397, 2.502817446992394),
                          (-76.58447205373531, 2.5027373411001714),
                          (-76.58451765386685, 2.5026613345456465),
                          (-76.58457049147358, 2.5025901593127142),
                          (-76.58463005769995, 2.502524500856937),
                          (-76.58469577889046, 2.5024649915042616),
                          (-76.58476702211428, 2.5024122043614123),
                          (-76.58484310126076, 2.5023666477965913),
                          (-76.58492328364693, 2.502328760543647),
                          (-76.58500679707373, 2.5022989074768582),
                          (-76.58509283726252, 2.50227737609702),
                          (-76.58518057560083, 2.5022643737626775),
                          (-76.58526916712216, 2.5022600256931633),
                          (-76.5853577586435, 2.5022643737626775),
                          (-76.58544549698179, 2.50227737609702),
                          (-76.5855315371706, 2.5022989074768582),
                          (-76.58561505059737, 2.502328760543647),
                          (-76.58569523298355, 2.5023666477965913),
                          (-76.58577131213003, 2.5024122043614123),
                          (-76.58584255535386, 2.5024649915042616),
                          (-76.58590827654436, 2.502524500856937),
                          (-76.58596784277074, 2.5025901593127142),
                          (-76.58602068037746, 2.5026613345456465),
                          (-76.586066280509, 2.5027373411001714),
                          (-76.58610420401034, 2.502817446992394),
                          (-76.58613408565631, 2.502900880759461),
                          (-76.58615563766897, 2.502986838889143),
                          (-76.58616865248909, 2.5030744935580755),
                          (-76.58617300477518, 2.5031630006041357),
                          (-76.58616865261058, 2.503251507656172),
                          (-76.58615563790727, 2.5033391623428054),
                          (-76.58613408600228, 2.503425120501232),
                          (-76.58610420445068, 2.5035085543069835),
                          (-76.58606628102677, 2.503588660246343),
                          (-76.58602068095277, 2.503664666854646),
                          (-76.58596784338148, 2.5037358421459306),
                          (-76.58590827716708, 2.5038015006623926),
                          (-76.58584255596462, 2.5038610100757523),
                          (-76.58577131270535, 2.5039137972769536),
                          (-76.58569523350133, 2.503959353895553),
                          (-76.5856150510377, 2.5039972411956337),
                          (-76.58553153751656, 2.5040270943011067),
                          (-76.5854454972201, 2.50404862570969),
                          (-76.58535775876497, 2.504061628061733),
                          (-76.58526916712216, 2.504065976137224),
                          (-76.58526916712216, 2.504065976137224)])


quebrada_cercana = LineString([(-76.5933099451316, 2.5065915470854776),
                                (-76.5926600769081, 2.5069522394958454),
                                (-76.59193800110499, 2.506627616331272),
                                (-76.59045774570755, 2.5065915470854776),
                                (-76.58995229264539, 2.5062669238314896),
                                (-76.58941073579271, 2.5062669238314896),
                                (-76.58901359410063, 2.5057258848968615),
                                (-76.5887247637794, 2.505509469259522),
                                (-76.58814710313622, 2.506050508285014),
                                (-76.58663074394896, 2.5049323607204315),
                                (-76.58637801741824, 2.505545538535131),
                                (-76.58565594161439, 2.5057980234337407),
                                (-76.58389001359171, 2.504419557417066),
                                (-76.58108746205124, 2.50260919858745),
                                (-76.58026484304631, 2.5027078187135743),
                                (-76.58010031924584, 2.5019517308881376),
                                (-76.57898155739981, 2.5018531107037916),
                                (-76.57578979566284, 2.5001765664517137),
                                (-76.57588605236887, 2.5002243786449156),
                                (-76.57509645420858, 2.4996609167368717),
                                (-76.57443577003463, 2.499371136233151),
                                (-76.5740812565745, 2.4989847621274066),
                                (-76.57390399984507, 2.498727179327929),
                                (-76.57361394337808, 2.4987593771805905),
                                (-76.5732594299186, 2.4988720696582334),
                                (-76.57279211672217, 2.498662783620162),
                                (-76.57256651724774, 2.4983247061019256),
                                (-76.57234091777327, 2.49789003487804),
                                (-76.57190583307312, 2.497519759278603),
                                (-76.57155131961363, 2.4971172856826627)])
#cementerio jardines de paz
cementerio_cercana = Polygon ([(-76.58079279223301, 2.506111979708507),
                               (-76.58050966333059, 2.5064891237970386),
                               (-76.57877943115106, 2.505619596985852),
                               (-76.5773742728968, 2.5043519725267345),
                               (-76.57631516107728, 2.50321006183934),
                                (-76.57803490700141, 2.5017119573196),
                                (-76.57974416666953, 2.5029272030759984),
                                (-76.5794610377671, 2.5050538804360514),
                                (-76.58079279223301, 2.506111979708507)])

carretera_cercana2 = LineString([(-76.58892777574697, 2.511666829965776),
                                (-76.58824427680898, 2.5106767082365877),
                                (-76.58325473456206, 2.5079453340589737),
                                (-76.57823101736825, 2.5055895192504636),
                                (-76.57088340378583, 2.496985637882858)])

# Crear un GeoDataFrame
#aqui se cambia el color
gdf = gpd.GeoDataFrame(geometry=[punto_casa, punto_barrio, recuadro_barrio, recuadro_casa, carretera_cercana1, carretera_cercana2, variente_cercana, quebrada_cercana, cementerio_cercana, barrio_cercano1, barrio_cercano2])

# Plotear el GeoDataFrame con colores específicos para cada geometría
ax = gdf.plot(color='gray', figsize=(10, 10))  # Plotear geometrías no etiquetadas en gris

# Plotear el recuadro con un color específico
gdf[gdf.geometry == recuadro_barrio].plot(ax=ax, color='#FFFF99')
gdf[gdf.geometry == recuadro_casa].plot(ax=ax, color='#FFB347')

# Plotear el carretera con un color específico
gdf[gdf.geometry == carretera_cercana1].plot(ax=ax, color='#808080', markersize=500)
gdf[gdf.geometry == carretera_cercana2].plot(ax=ax, color='#808080', markersize=500)

# Plotear el variante con un color específico
gdf[gdf.geometry == variente_cercana].plot(ax=ax, color='#555555', markersize=500)

# Plotear el quebrada con un color específico
gdf[gdf.geometry == quebrada_cercana].plot(ax=ax, color='#87CEEB', markersize=100)

# Plotear la casa con un color específico
gdf[gdf.geometry == punto_casa].plot(ax=ax, color='red', markersize=50)

# Plotear el barrio con un color específico
gdf[gdf.geometry == punto_barrio].plot(ax=ax, color='red', markersize=50)

gdf[gdf.geometry == cementerio_cercana].plot(ax=ax, color='#808081', markersize=500)

gdf[gdf.geometry == barrio_cercano1].plot(ax=ax, color='#FFFF99', markersize=500)
gdf[gdf.geometry == barrio_cercano2].plot(ax=ax, color='#FFFF99', markersize=500)


# Plotear el GeoDataFrame
gdf.plot()
plt.show()

# Guardar el GeoDataFrame en formato GeoJSON
gdf.to_file("mi_mapa15.geojson", driver='GeoJSON')

# Abrir GeoJSON.io y cargar el archivo GeoJSON generado
# Ve a https://geojson.io/
# Haz clic en "Open" y selecciona el archivo "mi_mapax.geojson" que acabas de guardar
# Ahora deberías ver tus geometrías en el mapa



# Plotear el GeoDataFrame con colores específicos para cada geometría
ax = gdf.plot(color='gray', figsize=(10, 10))  # Plotear geometrías no etiquetadas en gris

# Plotear el recuadro con un color específico
gdf[gdf.geometry == recuadro_barrio].plot(ax=ax, color='#FFFF99')
gdf[gdf.geometry == recuadro_casa].plot(ax=ax, color='#FFB347')

# Plotear el carretera con un color específico
gdf[gdf.geometry == carretera_cercana1].plot(ax=ax, color='#808080', markersize=500)
gdf[gdf.geometry == carretera_cercana2].plot(ax=ax, color='#808080', markersize=500)

# Plotear el variante con un color específico
gdf[gdf.geometry == variente_cercana].plot(ax=ax, color='#555555', markersize=500)

# Plotear el quebrada con un color específico
gdf[gdf.geometry == quebrada_cercana].plot(ax=ax, color='#87CEEB', markersize=100)

# Plotear la casa con un color específico
gdf[gdf.geometry == punto_casa].plot(ax=ax, color='red', markersize=50)

# Plotear el barrio con un color específico
gdf[gdf.geometry == punto_barrio].plot(ax=ax, color='red', markersize=50)

gdf[gdf.geometry == cementerio_cercana].plot(ax=ax, color='#808081', markersize=500)

gdf[gdf.geometry == barrio_cercano1].plot(ax=ax, color='#FFFF99', markersize=500)
gdf[gdf.geometry == barrio_cercano2].plot(ax=ax, color='#FFFF99', markersize=500)

plt.show()

# Guardar el GeoDataFrame en formato GeoJSON
gdf.to_file("mi_mapacolor11.geojson", driver='GeoJSON')

import os
print(os.getcwd())

#verificar si el archivo existe
from os.path import exists
ruta_completa= ("/content/mi_mapa.geojson")
exite=os.path,exists(ruta_completa)
print("existe?: ", exite)